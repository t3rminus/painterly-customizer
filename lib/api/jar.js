import getConfig from 'next/config';
import path from 'path';
import fs from 'fs/promises';
import zip from 'jszip';

const variantBlacklist = [
  'cat_all_black',
  'cat_red',
  'cat_black',
  'cat_white',
  'axolotl_blue',
  'axolotl_cyan',
  'parrot_blue',
  'parrot_green',
  'parrot_grey',
  'parrot_red_blue',
  'parrot_yellow_blue',
  'diamond_horse_armor',
  'gold_horse_armor',
  'iron_horse_armor',
  'leather_horse_armor',
  'rabbit_black',
  'rabbit_brown',
  'rabbit_white',
  'aztec2',
  'red_mushroom',
  'brown_mushroom',
  'red_sandstone',
];

const variantMarkers = [
  /* cow */
  '_brown_mooshroom',
  '_red_mooshroom',
  /* bamboo */
  '_large_leaves',
  '_singleleaf',
  '_small_leaves',
  /_stalk$/,
  /* pandas */
  '_aggressive_panda',
  '_lazy_panda',
  '_playful_panda',
  '_weak_panda',
  '_worried_panda',
  '_brown_panda',
  /* warden */
  '_bioluminescent_layer',
  '_pulsing_spots',
  /* dripstone */
  '_frustrum',
  '_tip_merge',
  /_tip$/,
  '_base',
  '_middle',
  /* food */
  'cooked_',
  /* compost */
  '_contents',
  '_contents_ready',
  '_compost',
  /* golem */
  '_crackiness_high',
  '_crackiness_medium',
  '_crackiness_low',
  /* candles */
  '_cake',
  '_one_candle',
  '_two_candles',
  '_three_candles',
  '_four_candles',
  /* colors */
  /^black_/,
  /^blue_/,
  /^brown_/,
  /^green_/,
  /^red_/,
  /^white_/,
  /^yellow_/,
  /^magenta_/,
  /^light_blue_/,
  /^light_gray_/,
  /^lime_/,
  /^orange_/,
  /^pink_/,
  /^cyan_/,
  /^gray_/,
  /^purple_/,
  /* sigh... shulker colors */
  /_light_blue$/,
  /_light_gray$/,
  /_black$/,
  /_blue$/,
  /_brown$/,
  /_green$/,
  /_red$/,
  /_white$/,
  /_yellow$/,
  /_magenta$/,
  /_lime$/,
  /_orange$/,
  /_pink$/,
  /_cyan$/,
  /_gray$/,
  /_grey$/, // Parrot is spelled this way v_v
  /_purple$/,
  /* variants */
  '_on_a_stick',
  /^one_/,
  /^two_/,
  /^three_/,
  /^four_/,
  /^dead_/,
  /^_armor/,
  'very_cracked_',
  'cracked_',
  '_slightly_cracked',
  '_very_cracked',
  '_brute',
  /_body$/,
  /_?[0-9]+$/,
  '_open',
  /_on$/,
  '_off',
  '_1tick',
  '_2tick',
  '_3tick',
  '_4tick',
  '_age',
  '_locked',
  '_pressed',
  '_lit',
  '_top',
  '_left',
  '_right',
  '_bottom',
  '_side',
  /_stripe$/,
  /_downleft$/,
  /_downright$/,
  '_up',
  '_down',
  '_horizontal',
  '_front',
  /_back$/,
  '_inner',
  '_ready',
  '_dead',
  '_subtract',
  '_outer',
  /_end$/,
  '_layer',
  '_angry',
  '_honey',
  '_mirrored',
  '_noside',
  '_alt',
  '_raised',
  '_overlay',
  '_hanging',
  '_north',
  '_east',
  '_south',
  '_west',
  '_attached', 
  '_bloom',
  '_can_summon',
  '_pattern',
  '_stage',
  '_level',
  '_level1',
  '_level2',
  '_full',
  '_active',
  '_base',
  '_inactive',
  '_wall_fan',
  '_fan',
  '_post',
  '_tall',
  '_cross',
  '_cast',
  /_height_[0-9]+$/,
  /_growth_[0-9]+$/,
  '_all',
  '_column',
  '_directional',
  '_mirroall',
  '_border',
  '_inverted',
  '_inside',
  '_outside',
  '_cap',
  '_break_particle',
  '_cage',
  '_closed_eye',
  '_power',
  '_wind_vertical',
  '_wind',
  /_eye$/,
  '_log',
  '_plant',
  /_arrow$/,
  /_firework$/,
  /_pulling$/,
  /_standby$/,
  /_crystal_beam$/,
  /_crystal$/,
  /* directions */
  /_sw$/,
  /_nsew$/,
  /_nse$/,
  /_ns$/,
  /_ne$/,
  /_n$/
];

const variantReplacements = {
  'horse_armor_diamond': 'diamond_horse_armor',
  'horse_armor_gold': 'golden_horse_armor',
  'horse_armor_iron': 'iron_horse_armor',
  'horse_armor_leather': 'leather_horse_armor',
  'chainmail_boots': 'armor_chainmail',
  'chainmail_chestplate': 'armor_chainmail',
  'chainmail_helmet': 'armor_chainmail',
  'chainmail_leggings': 'armor_chainmail',
  'leather_boots': 'armor_leather',
  'leather_chestplate': 'armor_leather',
  'leather_helmet': 'armor_leather',
  'leather_leggings': 'armor_leather',
  'iron_boots': 'armor_iron',
  'iron_chestplate': 'armor_iron',
  'iron_helmet': 'armor_iron',
  'iron_leggings': 'armor_iron',
  'gold_boots': 'armor_gold',
  'gold_chestplate': 'armor_gold',
  'gold_helmet': 'armor_gold',
  'gold_leggings': 'armor_gold',
  'diamond_boots': 'armor_diamond',
  'diamond_chestplate': 'armor_diamond',
  'diamond_helmet': 'armor_diamond',
  'diamond_leggings': 'armor_diamond',
  'netherite_boots': 'armor_netherite',
  'netherite_chestplate': 'armor_netherite',
  'netherite_helmet': 'armor_netherite',
  'netherite_leggings': 'armor_netherite',
  'beetroots': 'beetroot',
  'carrots': 'carrot',
  'potatoes': 'potato',
  'poisonous_potato': 'potato',
  'bee_angry_nectar': 'bee',
  'bee_nectar': 'bee',
  'bee_stinger': 'bee',
  'bundle_filled': 'bundle',
  'campfire_fire': 'campfire',
  'attached_melon_stem': 'melon',
  'attached_pumpkin_stem': 'pumpkin',
  'melon_stem': 'melon',
  'pumpkin_stem': 'pumpkin',
  'big_dripleaf_stem': 'big_dripleaf',
  'small_dripleaf_stem': 'small_dripleaf',
  'sheep_fur': 'sheep',
  'stained_glass_pane': 'stained_glass',
  'skulk_sensor_tendril': 'skulk_sensor',
  'redstone_dust_dot': 'redstone_dust',
  'redstone_dust_line': 'redstone_dust',
  'cat_all_black': 'cat',
  'cat_black': 'cat',
  'cat_british_shorthair': 'cat',
  'cat_calico': 'cat',
  'cat_collar': 'cat',
  'cat_jellie': 'cat',
  'cat_ocelot': 'cat',
  'cat_persian': 'cat',
  'cat_ragdoll': 'cat',
  'cat_red': 'cat',
  'cat_siamese': 'cat',
  'cat_tabby': 'cat',
  'cat_white': 'cat',
  'axolotl_blue': 'axolotl',
  'axolotl_bucket': 'axolotl',
  'axolotl_cyan': 'axolotl',
  'axolotl_gold': 'axolotl',
  'axolotl_lucy': 'axolotl',
  'axolotl_wild': 'axolotl',
  'banner_bricks': 'banner',
  'banner_circle': 'banner',
  'banner_creeper': 'banner',
  'banner_curly': 'banner',
  'banner_diagonal': 'banner',
  'banner_flower': 'banner',
  'banner_globe': 'banner',
  'banner_gradient': 'banner',
  'banner_half': 'banner',
  'banner_half_vertical': 'banner',
  'banner_mojang': 'banner',
  'banner_piglin': 'banner',
  'banner_rhombus': 'banner',
  'banner_skull': 'banner',
  'banner_small_stripes': 'banner',
  'banner_square': 'banner',
  'banner_straight': 'banner',
  'banner_stripe': 'banner',
  'banner_stripe_center': 'banner',
  'banner_stripeleft': 'banner',
  'banner_striperight': 'banner',
  'banner_triangles': 'banner',
  'banner_triangle': 'banner',
  'banner_vertical': 'banner',
  'banner_center': 'banner',
  'dolphins_grace': 'dolphins',
  'dragon_breath': 'enderdragon',
  'enderdragon_dragon': 'enderdragon',
  'enderdragon_dragon_exploding': 'enderdragon',
  'enderdragon_dragon_eyes': 'enderdragon',
  'enderdragon_dragon_fireball': 'enderdragon',
  'grindstone_pivot': 'grindstone',
  'grindstone_round': 'grindstone',
  'horse_black': 'horse',
  'horse_brown': 'horse',
  'horse_gray': 'horse',
  'horse_white': 'horse',
  'horse_chestnut': 'horse',
  'horse_creamy': 'horse',
  'horse_darkbrown': 'horse',
  'horse_donkey': 'horse',
  'horse_markings_blackdots': 'horse',
  'horse_markings': 'horse',
  'horse_markings_whitedots': 'horse',
  'horse_markings_whitefield': 'horse',
  'horse_mule': 'horse',
  'horse_skeleton': 'horse',
  'horse_zombie': 'horse',
  'illager_evoker': 'illager',
  'illager_evokergs': 'illager',
  'illager_illusioner': 'illager',
  'illager_pillager': 'illager',
  'illager_ravager': 'illager',
  'illager_vex': 'illager',
  'illager_vex_charging': 'illager',
  'illager_vindicator': 'illager',
  'llama': 'llama',
  'llama_creamy': 'llama',
  'llama_decor': 'llama',
  'llama_decor_trader_llama': 'llama',
  'llama_spit': 'llama',
  'music_disc_blocks': 'music_disc',
  'music_disc_cat': 'music_disc',
  'music_disc_chirp': 'music_disc',
  'music_disc_far': 'music_disc',
  'music_disc_mall': 'music_disc',
  'music_disc_mellohi': 'music_disc',
  'music_disc_otherside': 'music_disc',
  'music_disc_pigstep': 'music_disc',
  'music_disc_stal': 'music_disc',
  'music_disc_strad': 'music_disc',
  'music_disc_wait': 'music_disc',
  'music_disc_ward': 'music_disc',
  'parrot_blue': 'parrot',
  'parrot_green': 'parrot',
  'parrot_grey': 'parrot',
  'parrot_red_blue': 'parrot',
  'parrot_yellow_blue': 'parrot',
  'rabbit_black': 'rabbit',
  'rabbit_brown': 'rabbit',
  'rabbit_caerbannog': 'rabbit',
  'rabbit_foot': 'rabbit',
  'rabbit_gold': 'rabbit',
  'rabbit_hide': 'rabbit',
  'rabbit_salt': 'rabbit',
  'rabbit_stew': 'rabbit',
  'rabbit_toast': 'rabbit',
  'rabbit_white': 'rabbit',
  'rabbit_white_splotched': 'rabbit',
  'shield_nopattern': 'shield',
  'shield_bricks': 'shield',
  'shield_circle': 'shield',
  'shield_creeper': 'shield',
  'shield_curly': 'shield',
  'shield_diagonal': 'shield',
  'shield_flower': 'shield',
  'shield_globe': 'shield',
  'shield_gradient': 'shield',
  'shield_half': 'shield',
  'shield_half_vertical': 'shield',
  'shield_mojang': 'shield',
  'shield_piglin': 'shield',
  'shield_rhombus': 'shield',
  'shield_skull': 'shield',
  'shield_small_stripes': 'shield',
  'shield_square': 'shield',
  'shield_straight': 'shield',
  'shield_stripe': 'shield',
  'shield_stripe_center': 'shield',
  'shield_stripeleft': 'shield',
  'shield_striperight': 'shield',
  'shield_triangles': 'shield',
  'shield_triangle': 'shield',
  'villager_profession_armorer': 'villager',
  'villager_profession_butcher': 'villager',
  'villager_profession_cartographer': 'villager',
  'villager_profession_cleric': 'villager',
  'villager_profession_farmer': 'villager',
  'villager_profession_fisherman': 'villager',
  'villager_profession_fletcher': 'villager',
  'villager_profession_leatherworker': 'villager',
  'villager_profession_diamond': 'villager',
  'villager_profession_emerald': 'villager',
  'villager_profession_gold': 'villager',
  'villager_profession_iron': 'villager',
  'villager_profession_stone': 'villager',
  'villager_profession_librarian': 'villager',
  'villager_profession_mason': 'villager',
  'villager_profession_nitwit': 'villager',
  'villager_profession_shepherd': 'villager',
  'villager_profession_toolsmith': 'villager',
  'villager_profession_weaponsmith': 'villager',
  'villager_type_desert': 'villager',
  'villager_type_jungle': 'villager',
  'villager_type_plains': 'villager',
  'villager_type_savanna': 'villager',
  'villager_type_snow': 'villager',
  'villager_type_swamp': 'villager',
  'villager_type_taiga': 'villager',
  'zombie_villager_profession_armorer': 'zombie_villager',
  'zombie_villager_profession_butcher': 'zombie_villager',
  'zombie_villager_profession_cartographer': 'zombie_villager',
  'zombie_villager_profession_cleric': 'zombie_villager',
  'zombie_villager_profession_farmer': 'zombie_villager',
  'zombie_villager_profession_fisherman': 'zombie_villager',
  'zombie_villager_profession_fletcher': 'zombie_villager',
  'zombie_villager_profession_leatherworker': 'zombie_villager',
  'zombie_villager_profession_diamond': 'zombie_villager',
  'zombie_villager_profession_emerald': 'zombie_villager',
  'zombie_villager_profession_gold': 'zombie_villager',
  'zombie_villager_profession_iron': 'zombie_villager',
  'zombie_villager_profession_stone': 'zombie_villager',
  'zombie_villager_profession_librarian': 'zombie_villager',
  'zombie_villager_profession_mason': 'zombie_villager',
  'zombie_villager_profession_nitwit': 'zombie_villager',
  'zombie_villager_profession_shepherd': 'zombie_villager',
  'zombie_villager_profession_toolsmith': 'zombie_villager',
  'zombie_villager_profession_weaponsmith': 'zombie_villager',
  'zombie_villager_type_desert': 'zombie_villager',
  'zombie_villager_type_jungle': 'zombie_villager',
  'zombie_villager_type_plains': 'zombie_villager',
  'zombie_villager_type_savanna': 'zombie_villager',
  'zombie_villager_type_snow': 'zombie_villager',
  'zombie_villager_type_swamp': 'zombie_villager',
  'zombie_villager_type_taiga': 'zombie_villager',
  'structure_block': 'structure_block',
  'structure_block_corner': 'structure_block',
  'structure_block_data': 'structure_block',
  'structure_block_load': 'structure_block',
  'structure_block_save': 'structure_block',
  'structure_void': 'structure_block',
  'wolf': 'wolf',
  'wolf_collar': 'wolf',
  'wolf_tame': 'wolf',
  'wither_armor': 'wither',
  'wither_invulnerable': 'wither',
  'wither_rose': 'wither',
  'zombie_drowned': 'zombie',
  'zombie_husk': 'zombie',
  'strider_cold': 'strider',
  'strider_saddle': 'strider',
  'sculk_sensor_tendril': 'sculk_sensor',
  'rail_corner': 'rail',
  'projectiles_spectral': 'projectiles',
  'projectiles_tipped': 'projectiles',
  'pointed_dripstone_frustum': 'pointed_dripstone',
  'phantom_eyes': 'phantom',
  'pearlescent_froglight': 'froglight',
  'ochre_froglight': 'froglight',
  'verdant_froglight': 'froglight',
  'stonecutter_saw': 'stonecutter',
  'crimson_hyphae': 'crimson_stem',
  'warped_hyphae': 'warped_stem',
  'boat_acacia': 'acacia_boat',
  'boat_birch': 'birch_boat',
  'boat_dark_oak': 'dark_boat',
  'boat_jungle': 'jungle_boat',
  'boat_mangrove': 'mangrove_boat',
  'boat_oak': 'oak_boat',
  'boat_spruce': 'spruce_boat'
};

const variantMarkersExtra = [
  /_slab$/,
  /_stairs$/,
  /_wall$/,
  /_fence$/,
  /_gate$/,
  /_pressure_plate$/,
  /_button$/,
  /_spawn_egg$/,
  /_button$/,
  /_slab_double$/,
  /_stable$/,
  /_unstable$/,
  /_flat$/,
  /_curved$/,
  /_inventory$/,
  /_wood$/,
  /_bud$/,
  /_cluster$/,
  /_sticky$/,
  /_short$/,
  /_head$/,
  /_between_walls$/,
  /_ceiling$/,
  /_floor$/,
  /_wall$/,
  /_partial_tilt$/,
  /_tilt$/,
  /_bottle$/,
  /_spawn_egg$/,
  /_empty$/,
  /_slice$/,
  /_extended$/,
  /_in_hand$/,
  /_throwing$/,
  /_torch/,
  /^potted_/,
  /^smooth_/,
  /^exposed_/,
  /^waxed_/,
  /^cut_/,
  /^oxidized_/,
  /^trapped_/,
  /^dead_/,
  /^sticky_/,
  /^tooting_/,
  /^stripped_/,
  /^infested_/,
  /^potted_/,
  /^petrified_/,
];

const cleanVariants = (str, extra = false) => {
  const selectedMarkers = extra ? variantMarkersExtra : variantMarkers;
  let base = Object.keys(variantReplacements).reduce((str, find) => (str.replace(find, variantReplacements[find])), str);
  // If we hit the blacklist, go no farther.
  if(variantBlacklist.includes(base)) {
    return base;
  }
  let newBase = selectedMarkers.reduce((str, marker) => str.replace(marker, ''), base);
  while(newBase != base) {
    base = newBase;
    // If we hit the blacklist, go no farther.
    if(variantBlacklist.includes(base)) {
      return base;
    }
    newBase = selectedMarkers.reduce((str, marker) => str.replace(marker, ''), base);
  }
  return Object.keys(variantReplacements).reduce((str, find) => (str.replace(find, variantReplacements[find])), base);
}

const mapKey = (key, arr) => arr.reduce((o, i) => (o[i[key]] = i, o), {});

export async function buildJarInfo(req, res) {
  const { serverRuntimeConfig: { rootPath }} = getConfig();
  const jarfile = path.resolve(rootPath, process.env.MINECRAFT_JAR);
  
  const default_jar = await zip.loadAsync(fs.readFile(jarfile), { createFolders: true });
  let resources = Object.values(default_jar.files)
    .filter((item) => /^assets\/minecraft\//.test(item.name) && !item.dir)
    .map(item => {
      const parts = item.name.split(/[/.]/).slice(2);
      const data = { file: item.name, kind: parts.shift(), ext: parts.pop(), name: parts.pop(), group: parts.length && parts.shift() };
      if(parts.length) {
        if(data.name.indexOf(parts.join('_')) !== 0) {
          data.name = parts.join('_') + '_' + data.name;
        }
      }
      return data;
    })
    .filter(item => ['textures','models'].includes(item.kind) && item.ext !== 'mcmeta' && item.group !== 'font' && item.group !== 'particle' && !item.name.includes('template_'))
    .sort((a,b) => a.name.localeCompare(b.name))
    .reduce((obj, item) => {
      const baseName = cleanVariants(item.name);
      if(item.name === baseName) {
        if(item.kind === 'textures') {
          obj[baseName] = { ...obj[baseName], group: item.group, name: baseName };
          obj[baseName].variants ??= {};
          obj[baseName].variants[item.name] = { ...obj[baseName].variants[item.name], [item.kind]: item.file };
        } else {
          obj[baseName] ??= { name: baseName, group: item.group };
          obj[baseName].variants ??= {};
          obj[baseName].variants[item.name] = { ...obj[baseName].variants[item.name], models: item.file };
        }
      } else {
        obj[baseName] ??= { name: baseName, group: item.group };
        obj[baseName].variants ??= {};
        obj[baseName].variants[item.name] = { ...obj[baseName].variants[item.name], [item.kind]: item.file };
      }
      return obj;
    }, {})
    
  const texturedResources = mapKey('name', Object.values(resources).filter(r => Object.values(r.variants).some(i => i.textures)));
  const unknownModels = {};
  Object.values(resources).forEach((item) => {
    if(item.variants && !(Object.values(item.variants).some(i => i.textures))) {
      const newName = cleanVariants(cleanVariants(item.name, true));
      if(texturedResources[`${newName}s`]) {
        texturedResources[`${newName}s`].variants = { ...texturedResources[`${newName}s`].variants, ...item.variants };
      } else if(texturedResources[`${newName}_planks`]) {
        texturedResources[`${newName}_planks`].variants = { ...texturedResources[`${newName}_planks`].variants, ...item.variants };
      } else if(texturedResources[`${newName}_block`]) {
        texturedResources[`${newName}_block`].variants = { ...texturedResources[`${newName}_block`].variants, ...item.variants };
      } else if(texturedResources[newName]) {
        texturedResources[newName].variants = { ...texturedResources[newName].variants, ...item.variants };
      } else {
        unknownModels[item.name] = item;
      }
    }
  });
  return texturedResources;
}